class MiniJava::Parser
start Program
expect 0

prechigh
  left LPAREN RPAREN LBRACKET RBRACKET DOT
  right NOT
  left STAR
  left PLUS MINUS
  left LT
  left AND
  right EQUAL
preclow

options no_result_var

rule
  Program: MainClassDeclaration ClassDeclarations { MiniJava::Syntax::Program.new(val[0], val[1]) }

  MainClassDeclaration:
    CLASS Identifier LBRACE MainMethodDeclaration RBRACE { MiniJava::Syntax::MainClassDeclaration.new(val[1], val[3]) }

  MainMethodDeclaration:
    PUBLIC STATIC VOID MAIN LPAREN RPAREN LBRACE
      Statement
    RBRACE { MiniJava::Syntax::MainMethodDeclaration.new(val[7]) }

  ClassDeclarations: { [] } | ClassDeclarations ClassDeclaration { val[0].append(val[1]) }

  ClassDeclaration:
      CLASS Identifier LBRACE ClassBody RBRACE { MiniJava::Syntax::ClassDeclaration.new(val[1], *val[3]) }
    | CLASS Identifier EXTENDS Identifier LBRACE ClassBody RBRACE
        { MiniJava::Syntax::SubclassDeclaration.new(val[1], val[3], *val[5]) }
    | error RBRACE { MiniJava::Syntax::InvalidClassDeclaration.instance }
  ClassBody: VariableDeclarations MethodDeclarations { [ val[0], val[1] ] }

  VariableDeclarations: { [] } | VariableDeclarations VariableDeclaration { val[0].append(val[1]) }
  VariableDeclaration:
      Type Identifier SEMICOLON { MiniJava::Syntax::VariableDeclaration.new(val[0], val[1]) }
    | Type error SEMICOLON { MiniJava::Syntax::InvalidVariableDeclaration.instance }

  MethodDeclarations: { [] } | MethodDeclarations MethodDeclaration { val[0].append(val[1]) }

  MethodDeclaration:
      MethodSignature LBRACE MethodBody RBRACE
        { MiniJava::Syntax::MethodDeclaration.new(*val[0], *val[2]) }
    | error RBRACE
        { MiniJava::Syntax::InvalidMethodDeclaration.instance }
  MethodSignature: PUBLIC Type Identifier LPAREN FormalParameters RPAREN { [ val[1], val[2], val[4] ] }
  MethodBody:
    VariableDeclarations
    Statements
    RETURN Expression SEMICOLON { [ val[0], val[1], val[3] ] }

  Type:
      INT LBRACKET RBRACKET { MiniJava::Syntax::ArrayType.instance }
    | BOOLEAN { MiniJava::Syntax::BooleanType.instance }
    | INT { MiniJava::Syntax::IntegerType.instance }
    | Identifier { MiniJava::Syntax::ObjectType.new(val[0]) }

  FormalParameters: { [] } | OneOrMoreFormalParameters { val[0] }

  OneOrMoreFormalParameters:
      FormalParameter { [ val[0] ] }
    | FormalParameter COMMA OneOrMoreFormalParameters { val[2].prepend(val[0]) }

  FormalParameter: Type Identifier { MiniJava::Syntax::FormalParameter.new(val[0], val[1]) }

  Statements: { [] } | Statement Statements { val[1].prepend(val[0]) }

  Statement:
      LBRACE Statements RBRACE { MiniJava::Syntax::Block.new(val[1]) }
    | IF LPAREN Expression RPAREN Statement ELSE Statement { MiniJava::Syntax::IfStatement.new(val[2], val[4], val[6]) }
    | WHILE LPAREN Expression RPAREN Statement { MiniJava::Syntax::WhileStatement.new(val[2], val[4]) }
    | PRINTLN LPAREN Expression RPAREN SEMICOLON { MiniJava::Syntax::PrintStatement.new(val[2]) }
    | Identifier EQUAL Expression SEMICOLON { MiniJava::Syntax::VariableAssignment.new(val[0], val[2]) }
    | Identifier LBRACKET Expression RBRACKET EQUAL Expression SEMICOLON { MiniJava::Syntax::ArrayElementAssignment.new(val[0], val[2], val[5]) }
    | error SEMICOLON { MiniJava::Syntax::InvalidStatement.instance }

  Expression:
      LPAREN Expression RPAREN { val[1] }
    | NOT Expression { MiniJava::Syntax::Not.new(val[1]) }
    | Expression AND Expression { MiniJava::Syntax::And.new(val[0], val[2]) }
    | Expression LT Expression { MiniJava::Syntax::LessThan.new(val[0], val[2]) }
    | Expression PLUS Expression { MiniJava::Syntax::Plus.new(val[0], val[2]) }
    | Expression MINUS Expression { MiniJava::Syntax::Minus.new(val[0], val[2]) }
    | Expression STAR Expression { MiniJava::Syntax::Times.new(val[0], val[2]) }
    | Identifier { MiniJava::Syntax::VariableAccess.new(val[0]) }
    | Expression LBRACKET Expression RBRACKET { MiniJava::Syntax::ArrayAccess.new(val[0], val[2]) }
    | Expression DOT LENGTH { MiniJava::Syntax::ArrayLength.new(val[0]) }
    | Expression DOT Identifier LPAREN ActualParameters RPAREN { MiniJava::Syntax::MethodInvocation.new(val[0], val[2], val[4]) }
    | NEW INT LBRACKET Expression RBRACKET { MiniJava::Syntax::NewArray.new(val[3]) }
    | NEW Identifier LPAREN RPAREN { MiniJava::Syntax::NewObject.new(val[1]) }
    | IntegerLiteral { val[0] }
    | TRUE { MiniJava::Syntax::TrueLiteral.instance }
    | FALSE { MiniJava::Syntax::FalseLiteral.instance }
    | THIS { MiniJava::Syntax::This.instance }

  ActualParameters: { [] } | OneOrMoreActualParameters { val[0] }

  OneOrMoreActualParameters:
      Expression { [ val[0] ] }
    | Expression COMMA OneOrMoreActualParameters { val[2].prepend(val[0]) }

  IntegerLiteral: DecimalNumeral { MiniJava::Syntax::IntegerLiteral.new(val[0]) }
  DecimalNumeral: DECIMAL_NUMERAL { Integer(val[0]) }

  Identifier: IDENTIFIER { MiniJava::Syntax::Identifier.new(val[0]) }
end

---- header ----
require "minijava/lexer"
require "minijava/syntax"
require "active_support/core_ext/module/delegation"

---- inner ----
delegate :next_token, :line, :column, to: :@lexer

def self.program_from(source)
  new(source).program
end

def initialize(source)
  @lexer   = MiniJava::Lexer.new(source)
  @yydebug = !ENV["DEBUG"].nil?
end

def on_error(*)
  $stderr.puts "Parse error at line #{line}, column #{column}"
end

alias_method :program, :do_parse
